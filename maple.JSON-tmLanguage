{ "name": "Maple",
  "scopeName": "source.maple",
  "fileTypes": ["mpl","md","mm"],
  "patterns": [
    { "match": "#.*$\n?",
      "name": "comment.line.maple"
    },
    { "name" : "comment.block.maple",
      "begin": "\\(\\*",
      "end" : "\\*\\)"
    },
    { "match": "\\b(module|proc)\\b",
      "name" : "entity.name.function.maple"
    },
    { "match": "\\b(apply|args|assign|assigned|assuming|cat|convert|copy|define|diff|dismantle|dsolve|entries|erf|eval|evalb|evalc|evalf|expand|factor|fsolve|gc|has|hastype|indets|indices|int|length|lhs|lprint|map|map2|member|membertype|nargs|nops|numelems|op|parse|plot|plot3d|print|printf|read|readdata|readline|readstat|remove|restart|rhs|save|select|selectremove|seq|showstat|solve|sscanf|stopat|subs|subsop|sprintf|time|type|unapply|userinfo|writedata|writeline|zip)\\b",
      "name" : "variable.parameter.commands.maple"
    },
    { "match": "\\b(add|ceil|denom|floor|igcd|Im|intersect|iquo|max|min|minus|mod|modp|mods|mul|numer|product|rand|Re|round|sqrt|subset|sum|union)\\b",
      "name" : "variable.parameter.math.maple"
    },
    { "match": "\\b(anames|cache|description|exports|interface|kernelopts|option|protect|quit|remember|system|trace|unprotect|use|uses|with)\\b",
      "name" : "variable.parameter.system.maple"
    },
    { "match": "[a-zA-Z]+\\[[a-zA-Z][a-zA-Z0-9]+\\]+\\:+\\-+([a-zA-Z][a-zA-Z0-9]*)+|[a-zA-Z]+(\\:\\-[a-zA-Z][a-zA-Z0-9]*)+",
      "name": "variable.parameter.general.maple"
    },
    { "match": "\\b(diffalg|finance|linalg|networks|polytools|process|stats|student|tensor)\\b",
      "name" : "invalid.deprecated.packages.maple"
    },
    { "match": "\\b(array|Eigenvals|ERROR|evalm|INTERFACE_HELP|interp|intrep2maple|lattice|maple2intrep|matrix|maxorder|ModifiedMeijerG|pdesolve|animate3d|cylinderplot|graphplot3d|sphereplot|pieslice|vrml|procbody|procmake|radsimp|ratinterp|readlib|requires|RETURN|SDMPolynom|\\_seed|solvefor|spline|Svd|thiele|traperror|ShortTermOrder|TermOrder|vector)\\b",
      "name" : "invalid.deprecated.commands.maple"
    },
    { "match": "\\b(\\-\\-)\\b",
      "name" : "invalid.illegal.maple"
    },
    { "match": "\\b(TRUE|FALSE|NaN)\\b",
      "name" : "constant.language.maple"
    },
    { "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
      "name" : "constant.numeric.maple"
    },
    { "match": "\\b(global|local)\\b",
      "name" : "storage.modifier.maple"
    },
    { "match": "\\b(algebraic|anything|Array|boolean|character|complex|even|float|fraction|indexed|integer|list|listlist|matrix|Matrix|name|negint|nonnegint|nonposint|numeric|odd|posint|prime|procedure|protected|range|rational|record|Record|rtable|set|specfunc|string|table|truefalse|uneval|Vector|void)\\b",
      "name" : "storage.type.maple"
    },
    { "match": "\\b(Catalan|constants|Digits|FAIL|false|gamma|I|infinity|lasterror|libname|NULL|Order|Pi|printlevel|true|undefined)\\b",
      "name" : "support.constant.initiallyknownnames.maple"
    },
    { "match": "\\b(and|break|catch|do|elif|else|end|error|export|fi|finally|for|from|if|implies|in|is|next|not|od|or|return|then|to|try|WARNING|while|xor)\\b",
      "name" : "keyword.control.maple"
    },
    { "match": "\\(|\\)|\\[|\\]|\\{|\\}|\\;|\\:|\\'|\\<|\\>|\\,|\\:\\:",
      "name" : "comment.character.maple"
    },
    { "match": "\\+|\\-|\\*|\\/|\\^|\\~\\+|\\~\\-|\\~\\*|\\~\\/",
      "name" : "keyword.operator.arithmetic.maple"
    },
    { "match": "\\:=",
      "name" : "keyword.operator.assignment.maple"
    },
    { "match": "\\<\\>|\\|\\||\\>\\=|\\<\\=",
      "name" : "keyword.operator.logical.maple"
    },
    { "match": "\\@|\\@\\@|\\%|\\%\\%|\\%\\%\\%|\\!|\\:\\-",
      "name" : "keyword.operator.misc.maple"
    },
    { "name" : "string.double.maple",
      "match" : "((?<![\\\\])[\"])((?:.(?!(?<![\\\\])\\1))*.?)\\1"
    }
  ],
"uuid": "cb65c5f8-8140-4a4f-b204-476dc6d7812c"
}
